// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data.proto

#ifndef PROTOBUF_onnx_2fonnx_2ddata_2eproto__INCLUDED
#define PROTOBUF_onnx_2fonnx_2ddata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "onnx/onnx-ml.pb.h"
// @@protoc_insertion_point(includes)

namespace onnx {

// Internal implementation detail -- do not call these.
void ONNX_API protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
void protobuf_AssignDesc_onnx_2fonnx_2ddata_2eproto();
void protobuf_ShutdownFile_onnx_2fonnx_2ddata_2eproto();

class MapProto;
class OptionalProto;
class SequenceProto;

enum SequenceProto_DataType {
  SequenceProto_DataType_UNDEFINED = 0,
  SequenceProto_DataType_TENSOR = 1,
  SequenceProto_DataType_SPARSE_TENSOR = 2,
  SequenceProto_DataType_SEQUENCE = 3,
  SequenceProto_DataType_MAP = 4,
  SequenceProto_DataType_OPTIONAL = 5
};
ONNX_API bool SequenceProto_DataType_IsValid(int value);
const SequenceProto_DataType SequenceProto_DataType_DataType_MIN = SequenceProto_DataType_UNDEFINED;
const SequenceProto_DataType SequenceProto_DataType_DataType_MAX = SequenceProto_DataType_OPTIONAL;
const int SequenceProto_DataType_DataType_ARRAYSIZE = SequenceProto_DataType_DataType_MAX + 1;

ONNX_API const ::google::protobuf::EnumDescriptor* SequenceProto_DataType_descriptor();
inline const ::std::string& SequenceProto_DataType_Name(SequenceProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SequenceProto_DataType_descriptor(), value);
}
inline bool SequenceProto_DataType_Parse(
    const ::std::string& name, SequenceProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SequenceProto_DataType>(
    SequenceProto_DataType_descriptor(), name, value);
}
enum OptionalProto_DataType {
  OptionalProto_DataType_UNDEFINED = 0,
  OptionalProto_DataType_TENSOR = 1,
  OptionalProto_DataType_SPARSE_TENSOR = 2,
  OptionalProto_DataType_SEQUENCE = 3,
  OptionalProto_DataType_MAP = 4,
  OptionalProto_DataType_OPTIONAL = 5
};
ONNX_API bool OptionalProto_DataType_IsValid(int value);
const OptionalProto_DataType OptionalProto_DataType_DataType_MIN = OptionalProto_DataType_UNDEFINED;
const OptionalProto_DataType OptionalProto_DataType_DataType_MAX = OptionalProto_DataType_OPTIONAL;
const int OptionalProto_DataType_DataType_ARRAYSIZE = OptionalProto_DataType_DataType_MAX + 1;

ONNX_API const ::google::protobuf::EnumDescriptor* OptionalProto_DataType_descriptor();
inline const ::std::string& OptionalProto_DataType_Name(OptionalProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionalProto_DataType_descriptor(), value);
}
inline bool OptionalProto_DataType_Parse(
    const ::std::string& name, OptionalProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionalProto_DataType>(
    OptionalProto_DataType_descriptor(), name, value);
}
// ===================================================================

class ONNX_API SequenceProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.SequenceProto) */ {
 public:
  SequenceProto();
  virtual ~SequenceProto();

  SequenceProto(const SequenceProto& from);

  inline SequenceProto& operator=(const SequenceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SequenceProto& default_instance();

  void Swap(SequenceProto* other);

  // implements Message ----------------------------------------------

  inline SequenceProto* New() const { return New(NULL); }

  SequenceProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SequenceProto& from);
  void MergeFrom(const SequenceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SequenceProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SequenceProto_DataType DataType;
  static const DataType UNDEFINED =
    SequenceProto_DataType_UNDEFINED;
  static const DataType TENSOR =
    SequenceProto_DataType_TENSOR;
  static const DataType SPARSE_TENSOR =
    SequenceProto_DataType_SPARSE_TENSOR;
  static const DataType SEQUENCE =
    SequenceProto_DataType_SEQUENCE;
  static const DataType MAP =
    SequenceProto_DataType_MAP;
  static const DataType OPTIONAL =
    SequenceProto_DataType_OPTIONAL;
  static inline bool DataType_IsValid(int value) {
    return SequenceProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    SequenceProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    SequenceProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    SequenceProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return SequenceProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return SequenceProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return SequenceProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 elem_type = 2;
  bool has_elem_type() const;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 2;
  ::google::protobuf::int32 elem_type() const;
  void set_elem_type(::google::protobuf::int32 value);

  // repeated .onnx.TensorProto tensor_values = 3;
  int tensor_values_size() const;
  void clear_tensor_values();
  static const int kTensorValuesFieldNumber = 3;
  const ::onnx::TensorProto& tensor_values(int index) const;
  ::onnx::TensorProto* mutable_tensor_values(int index);
  ::onnx::TensorProto* add_tensor_values();
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_tensor_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      tensor_values() const;

  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  int sparse_tensor_values_size() const;
  void clear_sparse_tensor_values();
  static const int kSparseTensorValuesFieldNumber = 4;
  const ::onnx::SparseTensorProto& sparse_tensor_values(int index) const;
  ::onnx::SparseTensorProto* mutable_sparse_tensor_values(int index);
  ::onnx::SparseTensorProto* add_sparse_tensor_values();
  ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
      mutable_sparse_tensor_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
      sparse_tensor_values() const;

  // repeated .onnx.SequenceProto sequence_values = 5;
  int sequence_values_size() const;
  void clear_sequence_values();
  static const int kSequenceValuesFieldNumber = 5;
  const ::onnx::SequenceProto& sequence_values(int index) const;
  ::onnx::SequenceProto* mutable_sequence_values(int index);
  ::onnx::SequenceProto* add_sequence_values();
  ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >*
      mutable_sequence_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >&
      sequence_values() const;

  // repeated .onnx.MapProto map_values = 6;
  int map_values_size() const;
  void clear_map_values();
  static const int kMapValuesFieldNumber = 6;
  const ::onnx::MapProto& map_values(int index) const;
  ::onnx::MapProto* mutable_map_values(int index);
  ::onnx::MapProto* add_map_values();
  ::google::protobuf::RepeatedPtrField< ::onnx::MapProto >*
      mutable_map_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::MapProto >&
      map_values() const;

  // repeated .onnx.OptionalProto optional_values = 7;
  int optional_values_size() const;
  void clear_optional_values();
  static const int kOptionalValuesFieldNumber = 7;
  const ::onnx::OptionalProto& optional_values(int index) const;
  ::onnx::OptionalProto* mutable_optional_values(int index);
  ::onnx::OptionalProto* add_optional_values();
  ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >*
      mutable_optional_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >&
      optional_values() const;

  // @@protoc_insertion_point(class_scope:onnx.SequenceProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_elem_type();
  inline void clear_has_elem_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > tensor_values_;
  ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto > sparse_tensor_values_;
  ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto > sequence_values_;
  ::google::protobuf::RepeatedPtrField< ::onnx::MapProto > map_values_;
  ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto > optional_values_;
  ::google::protobuf::int32 elem_type_;
  friend void ONNX_API protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  friend void protobuf_AssignDesc_onnx_2fonnx_2ddata_2eproto();
  friend void protobuf_ShutdownFile_onnx_2fonnx_2ddata_2eproto();

  void InitAsDefaultInstance();
  static SequenceProto* default_instance_;
};
// -------------------------------------------------------------------

class ONNX_API MapProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.MapProto) */ {
 public:
  MapProto();
  virtual ~MapProto();

  MapProto(const MapProto& from);

  inline MapProto& operator=(const MapProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapProto& default_instance();

  void Swap(MapProto* other);

  // implements Message ----------------------------------------------

  inline MapProto* New() const { return New(NULL); }

  MapProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapProto& from);
  void MergeFrom(const MapProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 key_type = 2;
  bool has_key_type() const;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 2;
  ::google::protobuf::int32 key_type() const;
  void set_key_type(::google::protobuf::int32 value);

  // repeated int64 keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  ::google::protobuf::int64 keys(int index) const;
  void set_keys(int index, ::google::protobuf::int64 value);
  void add_keys(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      keys() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_keys();

  // repeated bytes string_keys = 4;
  int string_keys_size() const;
  void clear_string_keys();
  static const int kStringKeysFieldNumber = 4;
  const ::std::string& string_keys(int index) const;
  ::std::string* mutable_string_keys(int index);
  void set_string_keys(int index, const ::std::string& value);
  void set_string_keys(int index, const char* value);
  void set_string_keys(int index, const void* value, size_t size);
  ::std::string* add_string_keys();
  void add_string_keys(const ::std::string& value);
  void add_string_keys(const char* value);
  void add_string_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_keys();

  // optional .onnx.SequenceProto values = 5;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 5;
  const ::onnx::SequenceProto& values() const;
  ::onnx::SequenceProto* mutable_values();
  ::onnx::SequenceProto* release_values();
  void set_allocated_values(::onnx::SequenceProto* values);

  // @@protoc_insertion_point(class_scope:onnx.MapProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_values();
  inline void clear_has_values();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_keys_;
  ::onnx::SequenceProto* values_;
  ::google::protobuf::int32 key_type_;
  friend void ONNX_API protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  friend void protobuf_AssignDesc_onnx_2fonnx_2ddata_2eproto();
  friend void protobuf_ShutdownFile_onnx_2fonnx_2ddata_2eproto();

  void InitAsDefaultInstance();
  static MapProto* default_instance_;
};
// -------------------------------------------------------------------

class ONNX_API OptionalProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.OptionalProto) */ {
 public:
  OptionalProto();
  virtual ~OptionalProto();

  OptionalProto(const OptionalProto& from);

  inline OptionalProto& operator=(const OptionalProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionalProto& default_instance();

  void Swap(OptionalProto* other);

  // implements Message ----------------------------------------------

  inline OptionalProto* New() const { return New(NULL); }

  OptionalProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionalProto& from);
  void MergeFrom(const OptionalProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionalProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OptionalProto_DataType DataType;
  static const DataType UNDEFINED =
    OptionalProto_DataType_UNDEFINED;
  static const DataType TENSOR =
    OptionalProto_DataType_TENSOR;
  static const DataType SPARSE_TENSOR =
    OptionalProto_DataType_SPARSE_TENSOR;
  static const DataType SEQUENCE =
    OptionalProto_DataType_SEQUENCE;
  static const DataType MAP =
    OptionalProto_DataType_MAP;
  static const DataType OPTIONAL =
    OptionalProto_DataType_OPTIONAL;
  static inline bool DataType_IsValid(int value) {
    return OptionalProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    OptionalProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    OptionalProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    OptionalProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return OptionalProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return OptionalProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return OptionalProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 elem_type = 2;
  bool has_elem_type() const;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 2;
  ::google::protobuf::int32 elem_type() const;
  void set_elem_type(::google::protobuf::int32 value);

  // optional .onnx.TensorProto tensor_value = 3;
  bool has_tensor_value() const;
  void clear_tensor_value();
  static const int kTensorValueFieldNumber = 3;
  const ::onnx::TensorProto& tensor_value() const;
  ::onnx::TensorProto* mutable_tensor_value();
  ::onnx::TensorProto* release_tensor_value();
  void set_allocated_tensor_value(::onnx::TensorProto* tensor_value);

  // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
  bool has_sparse_tensor_value() const;
  void clear_sparse_tensor_value();
  static const int kSparseTensorValueFieldNumber = 4;
  const ::onnx::SparseTensorProto& sparse_tensor_value() const;
  ::onnx::SparseTensorProto* mutable_sparse_tensor_value();
  ::onnx::SparseTensorProto* release_sparse_tensor_value();
  void set_allocated_sparse_tensor_value(::onnx::SparseTensorProto* sparse_tensor_value);

  // optional .onnx.SequenceProto sequence_value = 5;
  bool has_sequence_value() const;
  void clear_sequence_value();
  static const int kSequenceValueFieldNumber = 5;
  const ::onnx::SequenceProto& sequence_value() const;
  ::onnx::SequenceProto* mutable_sequence_value();
  ::onnx::SequenceProto* release_sequence_value();
  void set_allocated_sequence_value(::onnx::SequenceProto* sequence_value);

  // optional .onnx.MapProto map_value = 6;
  bool has_map_value() const;
  void clear_map_value();
  static const int kMapValueFieldNumber = 6;
  const ::onnx::MapProto& map_value() const;
  ::onnx::MapProto* mutable_map_value();
  ::onnx::MapProto* release_map_value();
  void set_allocated_map_value(::onnx::MapProto* map_value);

  // optional .onnx.OptionalProto optional_value = 7;
  bool has_optional_value() const;
  void clear_optional_value();
  static const int kOptionalValueFieldNumber = 7;
  const ::onnx::OptionalProto& optional_value() const;
  ::onnx::OptionalProto* mutable_optional_value();
  ::onnx::OptionalProto* release_optional_value();
  void set_allocated_optional_value(::onnx::OptionalProto* optional_value);

  // @@protoc_insertion_point(class_scope:onnx.OptionalProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_elem_type();
  inline void clear_has_elem_type();
  inline void set_has_tensor_value();
  inline void clear_has_tensor_value();
  inline void set_has_sparse_tensor_value();
  inline void clear_has_sparse_tensor_value();
  inline void set_has_sequence_value();
  inline void clear_has_sequence_value();
  inline void set_has_map_value();
  inline void clear_has_map_value();
  inline void set_has_optional_value();
  inline void clear_has_optional_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::onnx::TensorProto* tensor_value_;
  ::onnx::SparseTensorProto* sparse_tensor_value_;
  ::onnx::SequenceProto* sequence_value_;
  ::onnx::MapProto* map_value_;
  ::onnx::OptionalProto* optional_value_;
  ::google::protobuf::int32 elem_type_;
  friend void ONNX_API protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  friend void protobuf_AssignDesc_onnx_2fonnx_2ddata_2eproto();
  friend void protobuf_ShutdownFile_onnx_2fonnx_2ddata_2eproto();

  void InitAsDefaultInstance();
  static OptionalProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SequenceProto

// optional string name = 1;
inline bool SequenceProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SequenceProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SequenceProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SequenceProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SequenceProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SequenceProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.SequenceProto.name)
}
inline void SequenceProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.SequenceProto.name)
}
inline void SequenceProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.SequenceProto.name)
}
inline ::std::string* SequenceProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SequenceProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.SequenceProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SequenceProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.SequenceProto.name)
}

// optional int32 elem_type = 2;
inline bool SequenceProto::has_elem_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SequenceProto::set_has_elem_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SequenceProto::clear_has_elem_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SequenceProto::clear_elem_type() {
  elem_type_ = 0;
  clear_has_elem_type();
}
inline ::google::protobuf::int32 SequenceProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.elem_type)
  return elem_type_;
}
inline void SequenceProto::set_elem_type(::google::protobuf::int32 value) {
  set_has_elem_type();
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.SequenceProto.elem_type)
}

// repeated .onnx.TensorProto tensor_values = 3;
inline int SequenceProto::tensor_values_size() const {
  return tensor_values_.size();
}
inline void SequenceProto::clear_tensor_values() {
  tensor_values_.Clear();
}
inline const ::onnx::TensorProto& SequenceProto::tensor_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.tensor_values)
  return tensor_values_.Get(index);
}
inline ::onnx::TensorProto* SequenceProto::mutable_tensor_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.tensor_values)
  return tensor_values_.Mutable(index);
}
inline ::onnx::TensorProto* SequenceProto::add_tensor_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.tensor_values)
  return tensor_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
SequenceProto::mutable_tensor_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.tensor_values)
  return &tensor_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
SequenceProto::tensor_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.tensor_values)
  return tensor_values_;
}

// repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
inline int SequenceProto::sparse_tensor_values_size() const {
  return sparse_tensor_values_.size();
}
inline void SequenceProto::clear_sparse_tensor_values() {
  sparse_tensor_values_.Clear();
}
inline const ::onnx::SparseTensorProto& SequenceProto::sparse_tensor_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_.Get(index);
}
inline ::onnx::SparseTensorProto* SequenceProto::mutable_sparse_tensor_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_.Mutable(index);
}
inline ::onnx::SparseTensorProto* SequenceProto::add_sparse_tensor_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
SequenceProto::mutable_sparse_tensor_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.sparse_tensor_values)
  return &sparse_tensor_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
SequenceProto::sparse_tensor_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_;
}

// repeated .onnx.SequenceProto sequence_values = 5;
inline int SequenceProto::sequence_values_size() const {
  return sequence_values_.size();
}
inline void SequenceProto::clear_sequence_values() {
  sequence_values_.Clear();
}
inline const ::onnx::SequenceProto& SequenceProto::sequence_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.sequence_values)
  return sequence_values_.Get(index);
}
inline ::onnx::SequenceProto* SequenceProto::mutable_sequence_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.sequence_values)
  return sequence_values_.Mutable(index);
}
inline ::onnx::SequenceProto* SequenceProto::add_sequence_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.sequence_values)
  return sequence_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >*
SequenceProto::mutable_sequence_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.sequence_values)
  return &sequence_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >&
SequenceProto::sequence_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.sequence_values)
  return sequence_values_;
}

// repeated .onnx.MapProto map_values = 6;
inline int SequenceProto::map_values_size() const {
  return map_values_.size();
}
inline void SequenceProto::clear_map_values() {
  map_values_.Clear();
}
inline const ::onnx::MapProto& SequenceProto::map_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.map_values)
  return map_values_.Get(index);
}
inline ::onnx::MapProto* SequenceProto::mutable_map_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.map_values)
  return map_values_.Mutable(index);
}
inline ::onnx::MapProto* SequenceProto::add_map_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.map_values)
  return map_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::MapProto >*
SequenceProto::mutable_map_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.map_values)
  return &map_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::MapProto >&
SequenceProto::map_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.map_values)
  return map_values_;
}

// repeated .onnx.OptionalProto optional_values = 7;
inline int SequenceProto::optional_values_size() const {
  return optional_values_.size();
}
inline void SequenceProto::clear_optional_values() {
  optional_values_.Clear();
}
inline const ::onnx::OptionalProto& SequenceProto::optional_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.optional_values)
  return optional_values_.Get(index);
}
inline ::onnx::OptionalProto* SequenceProto::mutable_optional_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.optional_values)
  return optional_values_.Mutable(index);
}
inline ::onnx::OptionalProto* SequenceProto::add_optional_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.optional_values)
  return optional_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >*
SequenceProto::mutable_optional_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.optional_values)
  return &optional_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >&
SequenceProto::optional_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.optional_values)
  return optional_values_;
}

// -------------------------------------------------------------------

// MapProto

// optional string name = 1;
inline bool MapProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MapProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.MapProto.name)
}
inline void MapProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.MapProto.name)
}
inline void MapProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.MapProto.name)
}
inline ::std::string* MapProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.MapProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.MapProto.name)
}

// optional int32 key_type = 2;
inline bool MapProto::has_key_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapProto::set_has_key_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapProto::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapProto::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
inline ::google::protobuf::int32 MapProto::key_type() const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.key_type)
  return key_type_;
}
inline void MapProto::set_key_type(::google::protobuf::int32 value) {
  set_has_key_type();
  key_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.MapProto.key_type)
}

// repeated int64 keys = 3;
inline int MapProto::keys_size() const {
  return keys_.size();
}
inline void MapProto::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::int64 MapProto::keys(int index) const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.keys)
  return keys_.Get(index);
}
inline void MapProto::set_keys(int index, ::google::protobuf::int64 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.MapProto.keys)
}
inline void MapProto::add_keys(::google::protobuf::int64 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.MapProto.keys)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MapProto::keys() const {
  // @@protoc_insertion_point(field_list:onnx.MapProto.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MapProto::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:onnx.MapProto.keys)
  return &keys_;
}

// repeated bytes string_keys = 4;
inline int MapProto::string_keys_size() const {
  return string_keys_.size();
}
inline void MapProto::clear_string_keys() {
  string_keys_.Clear();
}
inline const ::std::string& MapProto::string_keys(int index) const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.string_keys)
  return string_keys_.Get(index);
}
inline ::std::string* MapProto::mutable_string_keys(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.string_keys)
  return string_keys_.Mutable(index);
}
inline void MapProto::set_string_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.MapProto.string_keys)
  string_keys_.Mutable(index)->assign(value);
}
inline void MapProto::set_string_keys(int index, const char* value) {
  string_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.MapProto.string_keys)
}
inline void MapProto::set_string_keys(int index, const void* value, size_t size) {
  string_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.MapProto.string_keys)
}
inline ::std::string* MapProto::add_string_keys() {
  // @@protoc_insertion_point(field_add_mutable:onnx.MapProto.string_keys)
  return string_keys_.Add();
}
inline void MapProto::add_string_keys(const ::std::string& value) {
  string_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.MapProto.string_keys)
}
inline void MapProto::add_string_keys(const char* value) {
  string_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.MapProto.string_keys)
}
inline void MapProto::add_string_keys(const void* value, size_t size) {
  string_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.MapProto.string_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapProto::string_keys() const {
  // @@protoc_insertion_point(field_list:onnx.MapProto.string_keys)
  return string_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MapProto::mutable_string_keys() {
  // @@protoc_insertion_point(field_mutable_list:onnx.MapProto.string_keys)
  return &string_keys_;
}

// optional .onnx.SequenceProto values = 5;
inline bool MapProto::has_values() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapProto::set_has_values() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapProto::clear_has_values() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapProto::clear_values() {
  if (values_ != NULL) values_->::onnx::SequenceProto::Clear();
  clear_has_values();
}
inline const ::onnx::SequenceProto& MapProto::values() const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
inline ::onnx::SequenceProto* MapProto::mutable_values() {
  set_has_values();
  if (values_ == NULL) {
    values_ = new ::onnx::SequenceProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.values)
  return values_;
}
inline ::onnx::SequenceProto* MapProto::release_values() {
  // @@protoc_insertion_point(field_release:onnx.MapProto.values)
  clear_has_values();
  ::onnx::SequenceProto* temp = values_;
  values_ = NULL;
  return temp;
}
inline void MapProto::set_allocated_values(::onnx::SequenceProto* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.MapProto.values)
}

// -------------------------------------------------------------------

// OptionalProto

// optional string name = 1;
inline bool OptionalProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionalProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionalProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionalProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionalProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionalProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.OptionalProto.name)
}
inline void OptionalProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.OptionalProto.name)
}
inline void OptionalProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.OptionalProto.name)
}
inline ::std::string* OptionalProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionalProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionalProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.name)
}

// optional int32 elem_type = 2;
inline bool OptionalProto::has_elem_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionalProto::set_has_elem_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionalProto::clear_has_elem_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionalProto::clear_elem_type() {
  elem_type_ = 0;
  clear_has_elem_type();
}
inline ::google::protobuf::int32 OptionalProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.elem_type)
  return elem_type_;
}
inline void OptionalProto::set_elem_type(::google::protobuf::int32 value) {
  set_has_elem_type();
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.OptionalProto.elem_type)
}

// optional .onnx.TensorProto tensor_value = 3;
inline bool OptionalProto::has_tensor_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionalProto::set_has_tensor_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionalProto::clear_has_tensor_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionalProto::clear_tensor_value() {
  if (tensor_value_ != NULL) tensor_value_->::onnx::TensorProto::Clear();
  clear_has_tensor_value();
}
inline const ::onnx::TensorProto& OptionalProto::tensor_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.tensor_value)
  return tensor_value_ != NULL ? *tensor_value_ : *default_instance_->tensor_value_;
}
inline ::onnx::TensorProto* OptionalProto::mutable_tensor_value() {
  set_has_tensor_value();
  if (tensor_value_ == NULL) {
    tensor_value_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.tensor_value)
  return tensor_value_;
}
inline ::onnx::TensorProto* OptionalProto::release_tensor_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.tensor_value)
  clear_has_tensor_value();
  ::onnx::TensorProto* temp = tensor_value_;
  tensor_value_ = NULL;
  return temp;
}
inline void OptionalProto::set_allocated_tensor_value(::onnx::TensorProto* tensor_value) {
  delete tensor_value_;
  tensor_value_ = tensor_value;
  if (tensor_value) {
    set_has_tensor_value();
  } else {
    clear_has_tensor_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.tensor_value)
}

// optional .onnx.SparseTensorProto sparse_tensor_value = 4;
inline bool OptionalProto::has_sparse_tensor_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionalProto::set_has_sparse_tensor_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionalProto::clear_has_sparse_tensor_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionalProto::clear_sparse_tensor_value() {
  if (sparse_tensor_value_ != NULL) sparse_tensor_value_->::onnx::SparseTensorProto::Clear();
  clear_has_sparse_tensor_value();
}
inline const ::onnx::SparseTensorProto& OptionalProto::sparse_tensor_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.sparse_tensor_value)
  return sparse_tensor_value_ != NULL ? *sparse_tensor_value_ : *default_instance_->sparse_tensor_value_;
}
inline ::onnx::SparseTensorProto* OptionalProto::mutable_sparse_tensor_value() {
  set_has_sparse_tensor_value();
  if (sparse_tensor_value_ == NULL) {
    sparse_tensor_value_ = new ::onnx::SparseTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.sparse_tensor_value)
  return sparse_tensor_value_;
}
inline ::onnx::SparseTensorProto* OptionalProto::release_sparse_tensor_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.sparse_tensor_value)
  clear_has_sparse_tensor_value();
  ::onnx::SparseTensorProto* temp = sparse_tensor_value_;
  sparse_tensor_value_ = NULL;
  return temp;
}
inline void OptionalProto::set_allocated_sparse_tensor_value(::onnx::SparseTensorProto* sparse_tensor_value) {
  delete sparse_tensor_value_;
  sparse_tensor_value_ = sparse_tensor_value;
  if (sparse_tensor_value) {
    set_has_sparse_tensor_value();
  } else {
    clear_has_sparse_tensor_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.sparse_tensor_value)
}

// optional .onnx.SequenceProto sequence_value = 5;
inline bool OptionalProto::has_sequence_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionalProto::set_has_sequence_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionalProto::clear_has_sequence_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionalProto::clear_sequence_value() {
  if (sequence_value_ != NULL) sequence_value_->::onnx::SequenceProto::Clear();
  clear_has_sequence_value();
}
inline const ::onnx::SequenceProto& OptionalProto::sequence_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.sequence_value)
  return sequence_value_ != NULL ? *sequence_value_ : *default_instance_->sequence_value_;
}
inline ::onnx::SequenceProto* OptionalProto::mutable_sequence_value() {
  set_has_sequence_value();
  if (sequence_value_ == NULL) {
    sequence_value_ = new ::onnx::SequenceProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.sequence_value)
  return sequence_value_;
}
inline ::onnx::SequenceProto* OptionalProto::release_sequence_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.sequence_value)
  clear_has_sequence_value();
  ::onnx::SequenceProto* temp = sequence_value_;
  sequence_value_ = NULL;
  return temp;
}
inline void OptionalProto::set_allocated_sequence_value(::onnx::SequenceProto* sequence_value) {
  delete sequence_value_;
  sequence_value_ = sequence_value;
  if (sequence_value) {
    set_has_sequence_value();
  } else {
    clear_has_sequence_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.sequence_value)
}

// optional .onnx.MapProto map_value = 6;
inline bool OptionalProto::has_map_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionalProto::set_has_map_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionalProto::clear_has_map_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionalProto::clear_map_value() {
  if (map_value_ != NULL) map_value_->::onnx::MapProto::Clear();
  clear_has_map_value();
}
inline const ::onnx::MapProto& OptionalProto::map_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.map_value)
  return map_value_ != NULL ? *map_value_ : *default_instance_->map_value_;
}
inline ::onnx::MapProto* OptionalProto::mutable_map_value() {
  set_has_map_value();
  if (map_value_ == NULL) {
    map_value_ = new ::onnx::MapProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.map_value)
  return map_value_;
}
inline ::onnx::MapProto* OptionalProto::release_map_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.map_value)
  clear_has_map_value();
  ::onnx::MapProto* temp = map_value_;
  map_value_ = NULL;
  return temp;
}
inline void OptionalProto::set_allocated_map_value(::onnx::MapProto* map_value) {
  delete map_value_;
  map_value_ = map_value;
  if (map_value) {
    set_has_map_value();
  } else {
    clear_has_map_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.map_value)
}

// optional .onnx.OptionalProto optional_value = 7;
inline bool OptionalProto::has_optional_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionalProto::set_has_optional_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionalProto::clear_has_optional_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionalProto::clear_optional_value() {
  if (optional_value_ != NULL) optional_value_->::onnx::OptionalProto::Clear();
  clear_has_optional_value();
}
inline const ::onnx::OptionalProto& OptionalProto::optional_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.optional_value)
  return optional_value_ != NULL ? *optional_value_ : *default_instance_->optional_value_;
}
inline ::onnx::OptionalProto* OptionalProto::mutable_optional_value() {
  set_has_optional_value();
  if (optional_value_ == NULL) {
    optional_value_ = new ::onnx::OptionalProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.optional_value)
  return optional_value_;
}
inline ::onnx::OptionalProto* OptionalProto::release_optional_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.optional_value)
  clear_has_optional_value();
  ::onnx::OptionalProto* temp = optional_value_;
  optional_value_ = NULL;
  return temp;
}
inline void OptionalProto::set_allocated_optional_value(::onnx::OptionalProto* optional_value) {
  delete optional_value_;
  optional_value_ = optional_value;
  if (optional_value) {
    set_has_optional_value();
  } else {
    clear_has_optional_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.optional_value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onnx

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::onnx::SequenceProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::SequenceProto_DataType>() {
  return ::onnx::SequenceProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::onnx::OptionalProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::OptionalProto_DataType>() {
  return ::onnx::OptionalProto_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onnx_2fonnx_2ddata_2eproto__INCLUDED
