// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "onnx/onnx-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace onnx {

namespace {

const ::google::protobuf::Descriptor* SequenceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SequenceProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SequenceProto_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionalProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionalProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OptionalProto_DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_onnx_2fonnx_2ddata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_onnx_2fonnx_2ddata_2eproto() {
  protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "onnx/onnx-data.proto");
  GOOGLE_CHECK(file != NULL);
  SequenceProto_descriptor_ = file->message_type(0);
  static const int SequenceProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, elem_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, tensor_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, sparse_tensor_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, sequence_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, map_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, optional_values_),
  };
  SequenceProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SequenceProto_descriptor_,
      SequenceProto::default_instance_,
      SequenceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(SequenceProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceProto, _internal_metadata_),
      -1);
  SequenceProto_DataType_descriptor_ = SequenceProto_descriptor_->enum_type(0);
  MapProto_descriptor_ = file->message_type(1);
  static const int MapProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapProto, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapProto, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapProto, string_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapProto, values_),
  };
  MapProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapProto_descriptor_,
      MapProto::default_instance_,
      MapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapProto, _internal_metadata_),
      -1);
  OptionalProto_descriptor_ = file->message_type(2);
  static const int OptionalProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, elem_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, tensor_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, sparse_tensor_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, sequence_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, map_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, optional_value_),
  };
  OptionalProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionalProto_descriptor_,
      OptionalProto::default_instance_,
      OptionalProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(OptionalProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalProto, _internal_metadata_),
      -1);
  OptionalProto_DataType_descriptor_ = OptionalProto_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_onnx_2fonnx_2ddata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SequenceProto_descriptor_, &SequenceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapProto_descriptor_, &MapProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionalProto_descriptor_, &OptionalProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_onnx_2fonnx_2ddata_2eproto() {
  delete SequenceProto::default_instance_;
  delete SequenceProto_reflection_;
  delete MapProto::default_instance_;
  delete MapProto_reflection_;
  delete OptionalProto::default_instance_;
  delete OptionalProto_reflection_;
}

void protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::onnx::protobuf_AddDesc_onnx_2fonnx_2dml_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024onnx/onnx-data.proto\022\004onnx\032\022onnx/onnx-"
    "ml.proto\"\360\002\n\rSequenceProto\022\014\n\004name\030\001 \001(\t"
    "\022\021\n\telem_type\030\002 \001(\005\022(\n\rtensor_values\030\003 \003"
    "(\0132\021.onnx.TensorProto\0225\n\024sparse_tensor_v"
    "alues\030\004 \003(\0132\027.onnx.SparseTensorProto\022,\n\017"
    "sequence_values\030\005 \003(\0132\023.onnx.SequencePro"
    "to\022\"\n\nmap_values\030\006 \003(\0132\016.onnx.MapProto\022,"
    "\n\017optional_values\030\007 \003(\0132\023.onnx.OptionalP"
    "roto\"]\n\010DataType\022\r\n\tUNDEFINED\020\000\022\n\n\006TENSO"
    "R\020\001\022\021\n\rSPARSE_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007\n\003"
    "MAP\020\004\022\014\n\010OPTIONAL\020\005\"r\n\010MapProto\022\014\n\004name\030"
    "\001 \001(\t\022\020\n\010key_type\030\002 \001(\005\022\014\n\004keys\030\003 \003(\003\022\023\n"
    "\013string_keys\030\004 \003(\014\022#\n\006values\030\005 \001(\0132\023.onn"
    "x.SequenceProto\"\353\002\n\rOptionalProto\022\014\n\004nam"
    "e\030\001 \001(\t\022\021\n\telem_type\030\002 \001(\005\022\'\n\014tensor_val"
    "ue\030\003 \001(\0132\021.onnx.TensorProto\0224\n\023sparse_te"
    "nsor_value\030\004 \001(\0132\027.onnx.SparseTensorProt"
    "o\022+\n\016sequence_value\030\005 \001(\0132\023.onnx.Sequenc"
    "eProto\022!\n\tmap_value\030\006 \001(\0132\016.onnx.MapProt"
    "o\022+\n\016optional_value\030\007 \001(\0132\023.onnx.Optiona"
    "lProto\"]\n\010DataType\022\r\n\tUNDEFINED\020\000\022\n\n\006TEN"
    "SOR\020\001\022\021\n\rSPARSE_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007"
    "\n\003MAP\020\004\022\014\n\010OPTIONAL\020\005", 901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "onnx/onnx-data.proto", &protobuf_RegisterTypes);
  SequenceProto::default_instance_ = new SequenceProto();
  MapProto::default_instance_ = new MapProto();
  OptionalProto::default_instance_ = new OptionalProto();
  SequenceProto::default_instance_->InitAsDefaultInstance();
  MapProto::default_instance_->InitAsDefaultInstance();
  OptionalProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_onnx_2fonnx_2ddata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_onnx_2fonnx_2ddata_2eproto {
  StaticDescriptorInitializer_onnx_2fonnx_2ddata_2eproto() {
    protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  }
} static_descriptor_initializer_onnx_2fonnx_2ddata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SequenceProto_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SequenceProto_DataType_descriptor_;
}
bool SequenceProto_DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SequenceProto_DataType SequenceProto::UNDEFINED;
const SequenceProto_DataType SequenceProto::TENSOR;
const SequenceProto_DataType SequenceProto::SPARSE_TENSOR;
const SequenceProto_DataType SequenceProto::SEQUENCE;
const SequenceProto_DataType SequenceProto::MAP;
const SequenceProto_DataType SequenceProto::OPTIONAL;
const SequenceProto_DataType SequenceProto::DataType_MIN;
const SequenceProto_DataType SequenceProto::DataType_MAX;
const int SequenceProto::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceProto::kNameFieldNumber;
const int SequenceProto::kElemTypeFieldNumber;
const int SequenceProto::kTensorValuesFieldNumber;
const int SequenceProto::kSparseTensorValuesFieldNumber;
const int SequenceProto::kSequenceValuesFieldNumber;
const int SequenceProto::kMapValuesFieldNumber;
const int SequenceProto::kOptionalValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceProto::SequenceProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.SequenceProto)
}

void SequenceProto::InitAsDefaultInstance() {
}

SequenceProto::SequenceProto(const SequenceProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.SequenceProto)
}

void SequenceProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elem_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SequenceProto::~SequenceProto() {
  // @@protoc_insertion_point(destructor:onnx.SequenceProto)
  SharedDtor();
}

void SequenceProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SequenceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SequenceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SequenceProto_descriptor_;
}

const SequenceProto& SequenceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  return *default_instance_;
}

SequenceProto* SequenceProto::default_instance_ = NULL;

SequenceProto* SequenceProto::New(::google::protobuf::Arena* arena) const {
  SequenceProto* n = new SequenceProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SequenceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.SequenceProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    elem_type_ = 0;
  }
  tensor_values_.Clear();
  sparse_tensor_values_.Clear();
  sequence_values_.Clear();
  map_values_.Clear();
  optional_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SequenceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.SequenceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onnx.SequenceProto.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_elem_type;
        break;
      }

      // optional int32 elem_type = 2;
      case 2: {
        if (tag == 16) {
         parse_elem_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elem_type_)));
          set_has_elem_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tensor_values;
        break;
      }

      // repeated .onnx.TensorProto tensor_values = 3;
      case 3: {
        if (tag == 26) {
         parse_tensor_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tensor_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tensor_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_tensor_values;
        if (input->ExpectTag(34)) goto parse_loop_sparse_tensor_values;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sparse_tensor_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sparse_tensor_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_sparse_tensor_values;
        if (input->ExpectTag(42)) goto parse_loop_sequence_values;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.SequenceProto sequence_values = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sequence_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sequence_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_sequence_values;
        if (input->ExpectTag(50)) goto parse_loop_map_values;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.MapProto map_values = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_map_values;
        if (input->ExpectTag(58)) goto parse_loop_optional_values;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.OptionalProto optional_values = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_optional_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_optional_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_optional_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.SequenceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.SequenceProto)
  return false;
#undef DO_
}

void SequenceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.SequenceProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx.SequenceProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 elem_type = 2;
  if (has_elem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elem_type(), output);
  }

  // repeated .onnx.TensorProto tensor_values = 3;
  for (unsigned int i = 0, n = this->tensor_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tensor_values(i), output);
  }

  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  for (unsigned int i = 0, n = this->sparse_tensor_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sparse_tensor_values(i), output);
  }

  // repeated .onnx.SequenceProto sequence_values = 5;
  for (unsigned int i = 0, n = this->sequence_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sequence_values(i), output);
  }

  // repeated .onnx.MapProto map_values = 6;
  for (unsigned int i = 0, n = this->map_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->map_values(i), output);
  }

  // repeated .onnx.OptionalProto optional_values = 7;
  for (unsigned int i = 0, n = this->optional_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->optional_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:onnx.SequenceProto)
}

::google::protobuf::uint8* SequenceProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.SequenceProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx.SequenceProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 elem_type = 2;
  if (has_elem_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elem_type(), target);
  }

  // repeated .onnx.TensorProto tensor_values = 3;
  for (unsigned int i = 0, n = this->tensor_values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tensor_values(i), false, target);
  }

  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  for (unsigned int i = 0, n = this->sparse_tensor_values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->sparse_tensor_values(i), false, target);
  }

  // repeated .onnx.SequenceProto sequence_values = 5;
  for (unsigned int i = 0, n = this->sequence_values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->sequence_values(i), false, target);
  }

  // repeated .onnx.MapProto map_values = 6;
  for (unsigned int i = 0, n = this->map_values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->map_values(i), false, target);
  }

  // repeated .onnx.OptionalProto optional_values = 7;
  for (unsigned int i = 0, n = this->optional_values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->optional_values(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.SequenceProto)
  return target;
}

int SequenceProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.SequenceProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 elem_type = 2;
    if (has_elem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elem_type());
    }

  }
  // repeated .onnx.TensorProto tensor_values = 3;
  total_size += 1 * this->tensor_values_size();
  for (int i = 0; i < this->tensor_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tensor_values(i));
  }

  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  total_size += 1 * this->sparse_tensor_values_size();
  for (int i = 0; i < this->sparse_tensor_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sparse_tensor_values(i));
  }

  // repeated .onnx.SequenceProto sequence_values = 5;
  total_size += 1 * this->sequence_values_size();
  for (int i = 0; i < this->sequence_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sequence_values(i));
  }

  // repeated .onnx.MapProto map_values = 6;
  total_size += 1 * this->map_values_size();
  for (int i = 0; i < this->map_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_values(i));
  }

  // repeated .onnx.OptionalProto optional_values = 7;
  total_size += 1 * this->optional_values_size();
  for (int i = 0; i < this->optional_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SequenceProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onnx.SequenceProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SequenceProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onnx.SequenceProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onnx.SequenceProto)
    MergeFrom(*source);
  }
}

void SequenceProto::MergeFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.SequenceProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tensor_values_.MergeFrom(from.tensor_values_);
  sparse_tensor_values_.MergeFrom(from.sparse_tensor_values_);
  sequence_values_.MergeFrom(from.sequence_values_);
  map_values_.MergeFrom(from.map_values_);
  optional_values_.MergeFrom(from.optional_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_elem_type()) {
      set_elem_type(from.elem_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SequenceProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceProto::CopyFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceProto::IsInitialized() const {

  return true;
}

void SequenceProto::Swap(SequenceProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceProto::InternalSwap(SequenceProto* other) {
  name_.Swap(&other->name_);
  std::swap(elem_type_, other->elem_type_);
  tensor_values_.UnsafeArenaSwap(&other->tensor_values_);
  sparse_tensor_values_.UnsafeArenaSwap(&other->sparse_tensor_values_);
  sequence_values_.UnsafeArenaSwap(&other->sequence_values_);
  map_values_.UnsafeArenaSwap(&other->map_values_);
  optional_values_.UnsafeArenaSwap(&other->optional_values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SequenceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SequenceProto_descriptor_;
  metadata.reflection = SequenceProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SequenceProto

// optional string name = 1;
bool SequenceProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SequenceProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SequenceProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SequenceProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SequenceProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.SequenceProto.name)
}
 void SequenceProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.SequenceProto.name)
}
 void SequenceProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.SequenceProto.name)
}
 ::std::string* SequenceProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SequenceProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.SequenceProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.SequenceProto.name)
}

// optional int32 elem_type = 2;
bool SequenceProto::has_elem_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SequenceProto::set_has_elem_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SequenceProto::clear_has_elem_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SequenceProto::clear_elem_type() {
  elem_type_ = 0;
  clear_has_elem_type();
}
 ::google::protobuf::int32 SequenceProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.elem_type)
  return elem_type_;
}
 void SequenceProto::set_elem_type(::google::protobuf::int32 value) {
  set_has_elem_type();
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.SequenceProto.elem_type)
}

// repeated .onnx.TensorProto tensor_values = 3;
int SequenceProto::tensor_values_size() const {
  return tensor_values_.size();
}
void SequenceProto::clear_tensor_values() {
  tensor_values_.Clear();
}
const ::onnx::TensorProto& SequenceProto::tensor_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.tensor_values)
  return tensor_values_.Get(index);
}
::onnx::TensorProto* SequenceProto::mutable_tensor_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.tensor_values)
  return tensor_values_.Mutable(index);
}
::onnx::TensorProto* SequenceProto::add_tensor_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.tensor_values)
  return tensor_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
SequenceProto::mutable_tensor_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.tensor_values)
  return &tensor_values_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
SequenceProto::tensor_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.tensor_values)
  return tensor_values_;
}

// repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
int SequenceProto::sparse_tensor_values_size() const {
  return sparse_tensor_values_.size();
}
void SequenceProto::clear_sparse_tensor_values() {
  sparse_tensor_values_.Clear();
}
const ::onnx::SparseTensorProto& SequenceProto::sparse_tensor_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_.Get(index);
}
::onnx::SparseTensorProto* SequenceProto::mutable_sparse_tensor_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_.Mutable(index);
}
::onnx::SparseTensorProto* SequenceProto::add_sparse_tensor_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
SequenceProto::mutable_sparse_tensor_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.sparse_tensor_values)
  return &sparse_tensor_values_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
SequenceProto::sparse_tensor_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_;
}

// repeated .onnx.SequenceProto sequence_values = 5;
int SequenceProto::sequence_values_size() const {
  return sequence_values_.size();
}
void SequenceProto::clear_sequence_values() {
  sequence_values_.Clear();
}
const ::onnx::SequenceProto& SequenceProto::sequence_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.sequence_values)
  return sequence_values_.Get(index);
}
::onnx::SequenceProto* SequenceProto::mutable_sequence_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.sequence_values)
  return sequence_values_.Mutable(index);
}
::onnx::SequenceProto* SequenceProto::add_sequence_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.sequence_values)
  return sequence_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >*
SequenceProto::mutable_sequence_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.sequence_values)
  return &sequence_values_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >&
SequenceProto::sequence_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.sequence_values)
  return sequence_values_;
}

// repeated .onnx.MapProto map_values = 6;
int SequenceProto::map_values_size() const {
  return map_values_.size();
}
void SequenceProto::clear_map_values() {
  map_values_.Clear();
}
const ::onnx::MapProto& SequenceProto::map_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.map_values)
  return map_values_.Get(index);
}
::onnx::MapProto* SequenceProto::mutable_map_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.map_values)
  return map_values_.Mutable(index);
}
::onnx::MapProto* SequenceProto::add_map_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.map_values)
  return map_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::MapProto >*
SequenceProto::mutable_map_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.map_values)
  return &map_values_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::MapProto >&
SequenceProto::map_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.map_values)
  return map_values_;
}

// repeated .onnx.OptionalProto optional_values = 7;
int SequenceProto::optional_values_size() const {
  return optional_values_.size();
}
void SequenceProto::clear_optional_values() {
  optional_values_.Clear();
}
const ::onnx::OptionalProto& SequenceProto::optional_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.optional_values)
  return optional_values_.Get(index);
}
::onnx::OptionalProto* SequenceProto::mutable_optional_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.optional_values)
  return optional_values_.Mutable(index);
}
::onnx::OptionalProto* SequenceProto::add_optional_values() {
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.optional_values)
  return optional_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >*
SequenceProto::mutable_optional_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.optional_values)
  return &optional_values_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >&
SequenceProto::optional_values() const {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.optional_values)
  return optional_values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapProto::kNameFieldNumber;
const int MapProto::kKeyTypeFieldNumber;
const int MapProto::kKeysFieldNumber;
const int MapProto::kStringKeysFieldNumber;
const int MapProto::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapProto::MapProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.MapProto)
}

void MapProto::InitAsDefaultInstance() {
  values_ = const_cast< ::onnx::SequenceProto*>(&::onnx::SequenceProto::default_instance());
}

MapProto::MapProto(const MapProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.MapProto)
}

void MapProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_type_ = 0;
  values_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapProto::~MapProto() {
  // @@protoc_insertion_point(destructor:onnx.MapProto)
  SharedDtor();
}

void MapProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete values_;
  }
}

void MapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapProto_descriptor_;
}

const MapProto& MapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  return *default_instance_;
}

MapProto* MapProto::default_instance_ = NULL;

MapProto* MapProto::New(::google::protobuf::Arena* arena) const {
  MapProto* n = new MapProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.MapProto)
  if (_has_bits_[0 / 32] & 19u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    key_type_ = 0;
    if (has_values()) {
      if (values_ != NULL) values_->::onnx::SequenceProto::Clear();
    }
  }
  keys_.Clear();
  string_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.MapProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onnx.MapProto.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key_type;
        break;
      }

      // optional int32 key_type = 2;
      case 2: {
        if (tag == 16) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_keys;
        break;
      }

      // repeated int64 keys = 3;
      case 3: {
        if (tag == 24) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_keys())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_keys;
        if (input->ExpectTag(34)) goto parse_string_keys;
        break;
      }

      // repeated bytes string_keys = 4;
      case 4: {
        if (tag == 34) {
         parse_string_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_string_keys;
        if (input->ExpectTag(42)) goto parse_values;
        break;
      }

      // optional .onnx.SequenceProto values = 5;
      case 5: {
        if (tag == 42) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.MapProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.MapProto)
  return false;
#undef DO_
}

void MapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.MapProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx.MapProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 key_type = 2;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key_type(), output);
  }

  // repeated int64 keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->keys(i), output);
  }

  // repeated bytes string_keys = 4;
  for (int i = 0; i < this->string_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->string_keys(i), output);
  }

  // optional .onnx.SequenceProto values = 5;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->values_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:onnx.MapProto)
}

::google::protobuf::uint8* MapProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.MapProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx.MapProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 key_type = 2;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key_type(), target);
  }

  // repeated int64 keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->keys(i), target);
  }

  // repeated bytes string_keys = 4;
  for (int i = 0; i < this->string_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->string_keys(i), target);
  }

  // optional .onnx.SequenceProto values = 5;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->values_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.MapProto)
  return target;
}

int MapProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.MapProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 19u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 key_type = 2;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

    // optional .onnx.SequenceProto values = 5;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->values_);
    }

  }
  // repeated int64 keys = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->keys(i));
    }
    total_size += 1 * this->keys_size() + data_size;
  }

  // repeated bytes string_keys = 4;
  total_size += 1 * this->string_keys_size();
  for (int i = 0; i < this->string_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onnx.MapProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onnx.MapProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onnx.MapProto)
    MergeFrom(*source);
  }
}

void MapProto::MergeFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.MapProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keys_.MergeFrom(from.keys_);
  string_keys_.MergeFrom(from.string_keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_values()) {
      mutable_values()->::onnx::SequenceProto::MergeFrom(from.values());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapProto::CopyFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapProto::IsInitialized() const {

  return true;
}

void MapProto::Swap(MapProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapProto::InternalSwap(MapProto* other) {
  name_.Swap(&other->name_);
  std::swap(key_type_, other->key_type_);
  keys_.UnsafeArenaSwap(&other->keys_);
  string_keys_.UnsafeArenaSwap(&other->string_keys_);
  std::swap(values_, other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapProto_descriptor_;
  metadata.reflection = MapProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapProto

// optional string name = 1;
bool MapProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MapProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MapProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.MapProto.name)
}
 void MapProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.MapProto.name)
}
 void MapProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.MapProto.name)
}
 ::std::string* MapProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.MapProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.MapProto.name)
}

// optional int32 key_type = 2;
bool MapProto::has_key_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapProto::set_has_key_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MapProto::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapProto::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
 ::google::protobuf::int32 MapProto::key_type() const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.key_type)
  return key_type_;
}
 void MapProto::set_key_type(::google::protobuf::int32 value) {
  set_has_key_type();
  key_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.MapProto.key_type)
}

// repeated int64 keys = 3;
int MapProto::keys_size() const {
  return keys_.size();
}
void MapProto::clear_keys() {
  keys_.Clear();
}
 ::google::protobuf::int64 MapProto::keys(int index) const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.keys)
  return keys_.Get(index);
}
 void MapProto::set_keys(int index, ::google::protobuf::int64 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.MapProto.keys)
}
 void MapProto::add_keys(::google::protobuf::int64 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.MapProto.keys)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MapProto::keys() const {
  // @@protoc_insertion_point(field_list:onnx.MapProto.keys)
  return keys_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MapProto::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:onnx.MapProto.keys)
  return &keys_;
}

// repeated bytes string_keys = 4;
int MapProto::string_keys_size() const {
  return string_keys_.size();
}
void MapProto::clear_string_keys() {
  string_keys_.Clear();
}
 const ::std::string& MapProto::string_keys(int index) const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.string_keys)
  return string_keys_.Get(index);
}
 ::std::string* MapProto::mutable_string_keys(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.string_keys)
  return string_keys_.Mutable(index);
}
 void MapProto::set_string_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.MapProto.string_keys)
  string_keys_.Mutable(index)->assign(value);
}
 void MapProto::set_string_keys(int index, const char* value) {
  string_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.MapProto.string_keys)
}
 void MapProto::set_string_keys(int index, const void* value, size_t size) {
  string_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.MapProto.string_keys)
}
 ::std::string* MapProto::add_string_keys() {
  // @@protoc_insertion_point(field_add_mutable:onnx.MapProto.string_keys)
  return string_keys_.Add();
}
 void MapProto::add_string_keys(const ::std::string& value) {
  string_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.MapProto.string_keys)
}
 void MapProto::add_string_keys(const char* value) {
  string_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.MapProto.string_keys)
}
 void MapProto::add_string_keys(const void* value, size_t size) {
  string_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.MapProto.string_keys)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapProto::string_keys() const {
  // @@protoc_insertion_point(field_list:onnx.MapProto.string_keys)
  return string_keys_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapProto::mutable_string_keys() {
  // @@protoc_insertion_point(field_mutable_list:onnx.MapProto.string_keys)
  return &string_keys_;
}

// optional .onnx.SequenceProto values = 5;
bool MapProto::has_values() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MapProto::set_has_values() {
  _has_bits_[0] |= 0x00000010u;
}
void MapProto::clear_has_values() {
  _has_bits_[0] &= ~0x00000010u;
}
void MapProto::clear_values() {
  if (values_ != NULL) values_->::onnx::SequenceProto::Clear();
  clear_has_values();
}
const ::onnx::SequenceProto& MapProto::values() const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
::onnx::SequenceProto* MapProto::mutable_values() {
  set_has_values();
  if (values_ == NULL) {
    values_ = new ::onnx::SequenceProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.values)
  return values_;
}
::onnx::SequenceProto* MapProto::release_values() {
  // @@protoc_insertion_point(field_release:onnx.MapProto.values)
  clear_has_values();
  ::onnx::SequenceProto* temp = values_;
  values_ = NULL;
  return temp;
}
void MapProto::set_allocated_values(::onnx::SequenceProto* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.MapProto.values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OptionalProto_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionalProto_DataType_descriptor_;
}
bool OptionalProto_DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OptionalProto_DataType OptionalProto::UNDEFINED;
const OptionalProto_DataType OptionalProto::TENSOR;
const OptionalProto_DataType OptionalProto::SPARSE_TENSOR;
const OptionalProto_DataType OptionalProto::SEQUENCE;
const OptionalProto_DataType OptionalProto::MAP;
const OptionalProto_DataType OptionalProto::OPTIONAL;
const OptionalProto_DataType OptionalProto::DataType_MIN;
const OptionalProto_DataType OptionalProto::DataType_MAX;
const int OptionalProto::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionalProto::kNameFieldNumber;
const int OptionalProto::kElemTypeFieldNumber;
const int OptionalProto::kTensorValueFieldNumber;
const int OptionalProto::kSparseTensorValueFieldNumber;
const int OptionalProto::kSequenceValueFieldNumber;
const int OptionalProto::kMapValueFieldNumber;
const int OptionalProto::kOptionalValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionalProto::OptionalProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.OptionalProto)
}

void OptionalProto::InitAsDefaultInstance() {
  tensor_value_ = const_cast< ::onnx::TensorProto*>(&::onnx::TensorProto::default_instance());
  sparse_tensor_value_ = const_cast< ::onnx::SparseTensorProto*>(&::onnx::SparseTensorProto::default_instance());
  sequence_value_ = const_cast< ::onnx::SequenceProto*>(&::onnx::SequenceProto::default_instance());
  map_value_ = const_cast< ::onnx::MapProto*>(&::onnx::MapProto::default_instance());
  optional_value_ = const_cast< ::onnx::OptionalProto*>(&::onnx::OptionalProto::default_instance());
}

OptionalProto::OptionalProto(const OptionalProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.OptionalProto)
}

void OptionalProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elem_type_ = 0;
  tensor_value_ = NULL;
  sparse_tensor_value_ = NULL;
  sequence_value_ = NULL;
  map_value_ = NULL;
  optional_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionalProto::~OptionalProto() {
  // @@protoc_insertion_point(destructor:onnx.OptionalProto)
  SharedDtor();
}

void OptionalProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete tensor_value_;
    delete sparse_tensor_value_;
    delete sequence_value_;
    delete map_value_;
    delete optional_value_;
  }
}

void OptionalProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionalProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionalProto_descriptor_;
}

const OptionalProto& OptionalProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_onnx_2fonnx_2ddata_2eproto();
  return *default_instance_;
}

OptionalProto* OptionalProto::default_instance_ = NULL;

OptionalProto* OptionalProto::New(::google::protobuf::Arena* arena) const {
  OptionalProto* n = new OptionalProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionalProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OptionalProto)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    elem_type_ = 0;
    if (has_tensor_value()) {
      if (tensor_value_ != NULL) tensor_value_->::onnx::TensorProto::Clear();
    }
    if (has_sparse_tensor_value()) {
      if (sparse_tensor_value_ != NULL) sparse_tensor_value_->::onnx::SparseTensorProto::Clear();
    }
    if (has_sequence_value()) {
      if (sequence_value_ != NULL) sequence_value_->::onnx::SequenceProto::Clear();
    }
    if (has_map_value()) {
      if (map_value_ != NULL) map_value_->::onnx::MapProto::Clear();
    }
    if (has_optional_value()) {
      if (optional_value_ != NULL) optional_value_->::onnx::OptionalProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OptionalProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.OptionalProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onnx.OptionalProto.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_elem_type;
        break;
      }

      // optional int32 elem_type = 2;
      case 2: {
        if (tag == 16) {
         parse_elem_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elem_type_)));
          set_has_elem_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tensor_value;
        break;
      }

      // optional .onnx.TensorProto tensor_value = 3;
      case 3: {
        if (tag == 26) {
         parse_tensor_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sparse_tensor_value;
        break;
      }

      // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
      case 4: {
        if (tag == 34) {
         parse_sparse_tensor_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse_tensor_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sequence_value;
        break;
      }

      // optional .onnx.SequenceProto sequence_value = 5;
      case 5: {
        if (tag == 42) {
         parse_sequence_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sequence_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_map_value;
        break;
      }

      // optional .onnx.MapProto map_value = 6;
      case 6: {
        if (tag == 50) {
         parse_map_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_optional_value;
        break;
      }

      // optional .onnx.OptionalProto optional_value = 7;
      case 7: {
        if (tag == 58) {
         parse_optional_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.OptionalProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.OptionalProto)
  return false;
#undef DO_
}

void OptionalProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.OptionalProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx.OptionalProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 elem_type = 2;
  if (has_elem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elem_type(), output);
  }

  // optional .onnx.TensorProto tensor_value = 3;
  if (has_tensor_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tensor_value_, output);
  }

  // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
  if (has_sparse_tensor_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sparse_tensor_value_, output);
  }

  // optional .onnx.SequenceProto sequence_value = 5;
  if (has_sequence_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sequence_value_, output);
  }

  // optional .onnx.MapProto map_value = 6;
  if (has_map_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->map_value_, output);
  }

  // optional .onnx.OptionalProto optional_value = 7;
  if (has_optional_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->optional_value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:onnx.OptionalProto)
}

::google::protobuf::uint8* OptionalProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.OptionalProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx.OptionalProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 elem_type = 2;
  if (has_elem_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elem_type(), target);
  }

  // optional .onnx.TensorProto tensor_value = 3;
  if (has_tensor_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tensor_value_, false, target);
  }

  // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
  if (has_sparse_tensor_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->sparse_tensor_value_, false, target);
  }

  // optional .onnx.SequenceProto sequence_value = 5;
  if (has_sequence_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->sequence_value_, false, target);
  }

  // optional .onnx.MapProto map_value = 6;
  if (has_map_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->map_value_, false, target);
  }

  // optional .onnx.OptionalProto optional_value = 7;
  if (has_optional_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->optional_value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.OptionalProto)
  return target;
}

int OptionalProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OptionalProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 elem_type = 2;
    if (has_elem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elem_type());
    }

    // optional .onnx.TensorProto tensor_value = 3;
    if (has_tensor_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tensor_value_);
    }

    // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
    if (has_sparse_tensor_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sparse_tensor_value_);
    }

    // optional .onnx.SequenceProto sequence_value = 5;
    if (has_sequence_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sequence_value_);
    }

    // optional .onnx.MapProto map_value = 6;
    if (has_map_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_value_);
    }

    // optional .onnx.OptionalProto optional_value = 7;
    if (has_optional_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->optional_value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionalProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onnx.OptionalProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OptionalProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionalProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onnx.OptionalProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onnx.OptionalProto)
    MergeFrom(*source);
  }
}

void OptionalProto::MergeFrom(const OptionalProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.OptionalProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_elem_type()) {
      set_elem_type(from.elem_type());
    }
    if (from.has_tensor_value()) {
      mutable_tensor_value()->::onnx::TensorProto::MergeFrom(from.tensor_value());
    }
    if (from.has_sparse_tensor_value()) {
      mutable_sparse_tensor_value()->::onnx::SparseTensorProto::MergeFrom(from.sparse_tensor_value());
    }
    if (from.has_sequence_value()) {
      mutable_sequence_value()->::onnx::SequenceProto::MergeFrom(from.sequence_value());
    }
    if (from.has_map_value()) {
      mutable_map_value()->::onnx::MapProto::MergeFrom(from.map_value());
    }
    if (from.has_optional_value()) {
      mutable_optional_value()->::onnx::OptionalProto::MergeFrom(from.optional_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OptionalProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onnx.OptionalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalProto::CopyFrom(const OptionalProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OptionalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalProto::IsInitialized() const {

  return true;
}

void OptionalProto::Swap(OptionalProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionalProto::InternalSwap(OptionalProto* other) {
  name_.Swap(&other->name_);
  std::swap(elem_type_, other->elem_type_);
  std::swap(tensor_value_, other->tensor_value_);
  std::swap(sparse_tensor_value_, other->sparse_tensor_value_);
  std::swap(sequence_value_, other->sequence_value_);
  std::swap(map_value_, other->map_value_);
  std::swap(optional_value_, other->optional_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionalProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionalProto_descriptor_;
  metadata.reflection = OptionalProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionalProto

// optional string name = 1;
bool OptionalProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OptionalProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void OptionalProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void OptionalProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& OptionalProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OptionalProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.OptionalProto.name)
}
 void OptionalProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.OptionalProto.name)
}
 void OptionalProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.OptionalProto.name)
}
 ::std::string* OptionalProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OptionalProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OptionalProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.name)
}

// optional int32 elem_type = 2;
bool OptionalProto::has_elem_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OptionalProto::set_has_elem_type() {
  _has_bits_[0] |= 0x00000002u;
}
void OptionalProto::clear_has_elem_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void OptionalProto::clear_elem_type() {
  elem_type_ = 0;
  clear_has_elem_type();
}
 ::google::protobuf::int32 OptionalProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.elem_type)
  return elem_type_;
}
 void OptionalProto::set_elem_type(::google::protobuf::int32 value) {
  set_has_elem_type();
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.OptionalProto.elem_type)
}

// optional .onnx.TensorProto tensor_value = 3;
bool OptionalProto::has_tensor_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OptionalProto::set_has_tensor_value() {
  _has_bits_[0] |= 0x00000004u;
}
void OptionalProto::clear_has_tensor_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void OptionalProto::clear_tensor_value() {
  if (tensor_value_ != NULL) tensor_value_->::onnx::TensorProto::Clear();
  clear_has_tensor_value();
}
const ::onnx::TensorProto& OptionalProto::tensor_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.tensor_value)
  return tensor_value_ != NULL ? *tensor_value_ : *default_instance_->tensor_value_;
}
::onnx::TensorProto* OptionalProto::mutable_tensor_value() {
  set_has_tensor_value();
  if (tensor_value_ == NULL) {
    tensor_value_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.tensor_value)
  return tensor_value_;
}
::onnx::TensorProto* OptionalProto::release_tensor_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.tensor_value)
  clear_has_tensor_value();
  ::onnx::TensorProto* temp = tensor_value_;
  tensor_value_ = NULL;
  return temp;
}
void OptionalProto::set_allocated_tensor_value(::onnx::TensorProto* tensor_value) {
  delete tensor_value_;
  tensor_value_ = tensor_value;
  if (tensor_value) {
    set_has_tensor_value();
  } else {
    clear_has_tensor_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.tensor_value)
}

// optional .onnx.SparseTensorProto sparse_tensor_value = 4;
bool OptionalProto::has_sparse_tensor_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OptionalProto::set_has_sparse_tensor_value() {
  _has_bits_[0] |= 0x00000008u;
}
void OptionalProto::clear_has_sparse_tensor_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void OptionalProto::clear_sparse_tensor_value() {
  if (sparse_tensor_value_ != NULL) sparse_tensor_value_->::onnx::SparseTensorProto::Clear();
  clear_has_sparse_tensor_value();
}
const ::onnx::SparseTensorProto& OptionalProto::sparse_tensor_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.sparse_tensor_value)
  return sparse_tensor_value_ != NULL ? *sparse_tensor_value_ : *default_instance_->sparse_tensor_value_;
}
::onnx::SparseTensorProto* OptionalProto::mutable_sparse_tensor_value() {
  set_has_sparse_tensor_value();
  if (sparse_tensor_value_ == NULL) {
    sparse_tensor_value_ = new ::onnx::SparseTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.sparse_tensor_value)
  return sparse_tensor_value_;
}
::onnx::SparseTensorProto* OptionalProto::release_sparse_tensor_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.sparse_tensor_value)
  clear_has_sparse_tensor_value();
  ::onnx::SparseTensorProto* temp = sparse_tensor_value_;
  sparse_tensor_value_ = NULL;
  return temp;
}
void OptionalProto::set_allocated_sparse_tensor_value(::onnx::SparseTensorProto* sparse_tensor_value) {
  delete sparse_tensor_value_;
  sparse_tensor_value_ = sparse_tensor_value;
  if (sparse_tensor_value) {
    set_has_sparse_tensor_value();
  } else {
    clear_has_sparse_tensor_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.sparse_tensor_value)
}

// optional .onnx.SequenceProto sequence_value = 5;
bool OptionalProto::has_sequence_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OptionalProto::set_has_sequence_value() {
  _has_bits_[0] |= 0x00000010u;
}
void OptionalProto::clear_has_sequence_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void OptionalProto::clear_sequence_value() {
  if (sequence_value_ != NULL) sequence_value_->::onnx::SequenceProto::Clear();
  clear_has_sequence_value();
}
const ::onnx::SequenceProto& OptionalProto::sequence_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.sequence_value)
  return sequence_value_ != NULL ? *sequence_value_ : *default_instance_->sequence_value_;
}
::onnx::SequenceProto* OptionalProto::mutable_sequence_value() {
  set_has_sequence_value();
  if (sequence_value_ == NULL) {
    sequence_value_ = new ::onnx::SequenceProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.sequence_value)
  return sequence_value_;
}
::onnx::SequenceProto* OptionalProto::release_sequence_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.sequence_value)
  clear_has_sequence_value();
  ::onnx::SequenceProto* temp = sequence_value_;
  sequence_value_ = NULL;
  return temp;
}
void OptionalProto::set_allocated_sequence_value(::onnx::SequenceProto* sequence_value) {
  delete sequence_value_;
  sequence_value_ = sequence_value;
  if (sequence_value) {
    set_has_sequence_value();
  } else {
    clear_has_sequence_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.sequence_value)
}

// optional .onnx.MapProto map_value = 6;
bool OptionalProto::has_map_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OptionalProto::set_has_map_value() {
  _has_bits_[0] |= 0x00000020u;
}
void OptionalProto::clear_has_map_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void OptionalProto::clear_map_value() {
  if (map_value_ != NULL) map_value_->::onnx::MapProto::Clear();
  clear_has_map_value();
}
const ::onnx::MapProto& OptionalProto::map_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.map_value)
  return map_value_ != NULL ? *map_value_ : *default_instance_->map_value_;
}
::onnx::MapProto* OptionalProto::mutable_map_value() {
  set_has_map_value();
  if (map_value_ == NULL) {
    map_value_ = new ::onnx::MapProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.map_value)
  return map_value_;
}
::onnx::MapProto* OptionalProto::release_map_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.map_value)
  clear_has_map_value();
  ::onnx::MapProto* temp = map_value_;
  map_value_ = NULL;
  return temp;
}
void OptionalProto::set_allocated_map_value(::onnx::MapProto* map_value) {
  delete map_value_;
  map_value_ = map_value;
  if (map_value) {
    set_has_map_value();
  } else {
    clear_has_map_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.map_value)
}

// optional .onnx.OptionalProto optional_value = 7;
bool OptionalProto::has_optional_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OptionalProto::set_has_optional_value() {
  _has_bits_[0] |= 0x00000040u;
}
void OptionalProto::clear_has_optional_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void OptionalProto::clear_optional_value() {
  if (optional_value_ != NULL) optional_value_->::onnx::OptionalProto::Clear();
  clear_has_optional_value();
}
const ::onnx::OptionalProto& OptionalProto::optional_value() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.optional_value)
  return optional_value_ != NULL ? *optional_value_ : *default_instance_->optional_value_;
}
::onnx::OptionalProto* OptionalProto::mutable_optional_value() {
  set_has_optional_value();
  if (optional_value_ == NULL) {
    optional_value_ = new ::onnx::OptionalProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.optional_value)
  return optional_value_;
}
::onnx::OptionalProto* OptionalProto::release_optional_value() {
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.optional_value)
  clear_has_optional_value();
  ::onnx::OptionalProto* temp = optional_value_;
  optional_value_ = NULL;
  return temp;
}
void OptionalProto::set_allocated_optional_value(::onnx::OptionalProto* optional_value) {
  delete optional_value_;
  optional_value_ = optional_value;
  if (optional_value) {
    set_has_optional_value();
  } else {
    clear_has_optional_value();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.optional_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace onnx

// @@protoc_insertion_point(global_scope)
